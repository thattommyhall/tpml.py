(begin (define zero (lambda (f) (lambda (x) x)))
  (define one (lambda (f) (lambda (x) (f x))))
  (define two (lambda (f) (lambda (x) (f (f x)))))
  (define three (lambda (f) (lambda (x) (f (f (f x))))))
  (define four (lambda (f) (lambda (x) (f (f (f (f x)))))))
  (define five (lambda (f) (lambda (x) (f (f (f (f (f x))))))))
  (define six (lambda (f) (lambda (x) (f (f (f (f (f (f x)))))))))
  (define seven (lambda (f) (lambda (x) (f (f (f (f (f (f (f x))))))))))
  (define eight (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f x)))))))))))
  (define nine (lambda (f) (lambda (x) (f (f (f (f (f (f (f (f (f x))))))))))))
  (define 1+ (lambda (n) (lambda (f) (lambda (x) (f ((n f) x))))))
  (define 1- (lambda (n) (lambda (f) (lambda (x) (((n (lambda (g)
                                                        (lambda (h) (h (g f)))))
                                                    (lambda (u) x))
                                                  (lambda (u) u))))))
  (define zero? (lambda (n) ((n (lambda (x) #f)) #t)))
  (define + (lambda (m n) (lambda (f) (lambda (x) ((m f) ((n f) x))))))
  (define * (lambda (m n) (lambda (f) (lambda (x) ((m (n f)) x)))))
  (define - (lambda (m n) (lambda (f) (lambda (x) ((((n 1-) m) f) x)))))
  (define <= (lambda (m n) (zero? (- m n))))
  (define = (lambda (m n) (if (<= m n) (<= n m) #f))))
